import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Download, Trash2, FileText, Clock, CheckCircle, XCircle } from "lucide-react";
import { ReportData } from "./types";

interface ReportCardProps {
  report: ReportData;
  onDownload: (reportId: string) => void;
  onDelete: (reportId: string) => void;
  isLoading: boolean;
}

export const ReportCard = ({ report, onDownload, onDelete, isLoading }: ReportCardProps) => {
  const getStatusIcon = (status: string) => {
    switch (status) {
      case "Generated": return <CheckCircle className="h-4 w-4 text-green-500" />;
      case "Processing": return <Clock className="h-4 w-4 text-yellow-500" />;
      case "Failed": return <XCircle className="h-4 w-4 text-red-500" />;
      default: return <FileText className="h-4 w-4 text-gray-500" />;
    }
  };

  const getStatusColor = (status: string) => {
    switch (status) {
      case "Generated": return "default";
      case "Processing": return "secondary";
      case "Failed": return "destructive";
      default: return "outline";
    }
  };

  const getTypeColor = (type: string) => {
    switch (type) {
      case "sales": return "bg-blue-100 text-blue-800";
      case "inventory": return "bg-green-100 text-green-800";
      case "customer": return "bg-purple-100 text-purple-800";
      case "financial": return "bg-orange-100 text-orange-800";
      case "prescription": return "bg-pink-100 text-pink-800";
      default: return "bg-gray-100 text-gray-800";
    }
  };

  return (
    <Card className="hover:shadow-lg transition-all duration-200">
      <CardHeader className="pb-3">
        <div className="flex items-start justify-between">
          <div className="flex-1">
            <CardTitle className="text-lg font-semibold text-gray-900 mb-1">
              {report.title}
            </CardTitle>
            <p className="text-sm text-gray-600 mb-2">{report.description}</p>
            <div className="flex items-center space-x-2">
              <Badge className={getTypeColor(report.type)}>
                {report.type.charAt(0).toUpperCase() + report.type.slice(1)}
              </Badge>
              <Badge variant={getStatusColor(report.status) as any} className="flex items-center">
                {getStatusIcon(report.status)}
                <span className="ml-1">{report.status}</span>
              </Badge>
            </div>
          </div>
        </div>
      </CardHeader>
      
      <CardContent className="pt-0">
        <div className="space-y-3">
          <div className="grid grid-cols-2 gap-4 text-sm">
            <div>
              <span className="text-gray-500">Date Range:</span>
              <p className="font-medium">{report.dateRange}</p>
            </div>
            <div>
              <span className="text-gray-500">Generated By:</span>
              <p className="font-medium">{report.generatedBy}</p>
            </div>
          </div>
          
          <div className="grid grid-cols-2 gap-4 text-sm">
            <div>
              <span className="text-gray-500">Generated At:</span>
              <p className="font-medium">
                {new Date(report.generatedAt).toLocaleDateString()}
              </p>
            </div>
            {report.fileSize && (
              <div>
                <span className="text-gray-500">File Size:</span>
                <p className="font-medium">{report.fileSize}</p>
              </div>
            )}
          </div>
          
          <div className="flex space-x-2 pt-2">
            {report.status === "Generated" && report.downloadUrl && (
              <Button
                variant="outline"
                size="sm"
                onClick={() => onDownload(report.id)}
                disabled={isLoading}
                className="flex-1"
              >
                <Download className="h-4 w-4 mr-2" />
                Download
              </Button>
            )}
            
            <Button
              variant="outline"
              size="sm"
              onClick={() => onDelete(report.id)}
              disabled={isLoading}
              className="text-red-600 hover:text-red-700"
            >
              <Trash2 className="h-4 w-4" />
            </Button>
          </div>
        </div>
      </CardContent>
    </Card>
  );
};